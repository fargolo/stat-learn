sample
for (i in 1:iter){
# Save last values
last_mu <- cur_mu
last_lik <- cur_lik
# Step
cur_mu <- cur_mu + rnorm(n=1,mean = 0, sd=0.5)
cur_lik <- log_lik(n=n_obs,x=a,mu=cur_mu,sigma=s_sigma) +
log_norm(n=10000,mu=0,sigma=1)/1000
if(cur_lik - last_lik > 10)
cur_mu <- last_mu
sample[i,] <- c(cur_mu,s_sigma)
}
sample
v
last_lik
cur_lik
cur_lik - last_lik
log_lik(n=n_obs,x=a,mu=cur_mu,sigma=s_sigma)
log_lik(n=n_obs,x=a,mu=0.2,sigma=s_sigma)
log_lik(n=n_obs,x=a,mu=30,sigma=s_sigma)
sample[3000:4000,]
sample[3500:4000,]
# chain
sample <- matrix(nrow = iter, ncol = 2)
for (i in 1:iter){
# Save last values
last_mu <- cur_mu
last_lik <- cur_lik
# Step
cur_mu <- cur_mu + rnorm(n=1,mean = 0, sd=0.5)
cur_lik <- log_lik(n=n_obs,x=a,mu=cur_mu,sigma=s_sigma) +
log_norm(n=10000,mu=0,sigma=1)/1000
if(cur_lik - last_lik > 5)
cur_mu <- last_mu
sample[i,] <- c(cur_mu,s_sigma)
}
mean(sample[1001:3000,1])
hist(sample[1001:3000,1],breaks = 100)
sample <- matrix(nrow = iter, ncol = 2)
for (i in 1:iter){
# Save last values
last_mu <- cur_mu
last_lik <- cur_lik
# Step
cur_mu <- cur_mu + rnorm(n=1,mean = 0, sd=0.5)
cur_lik <- log_lik(n=n_obs,x=b,mu=cur_mu,sigma=s_sigma) +
log_norm(n=10000,mu=0,sigma=1)/1000
if(cur_lik - last_lik > 5)
cur_mu <- last_mu
sample[i,] <- c(cur_mu,s_sigma)
}
mean(sample[1001:3000,1])
hist(sample[1001:3000,1],breaks = 100)
set.seed(2600)
n_obs <- 400
iter <- 4000
a <- rnorm(n=n_obs, sd =1, mean=0)
b <- rnorm(n=n_obs, sd=1, mean=0.6)
likel <- function(n,x,mu,sigma){
l_val <- (-n/2)*log(2*pi*sigma^2) - (1/2*sigma^2)*sum((x - mu)^2)
return(-l_val) # multiplica(-1)
}
log_norm <- function(n,mu,sigma){
require(magrittr)
unif_dist <- 1/runif(n = n, min = -1,max = 1)
l_val <- log(dnorm(x=unif_dist,mean = 0,sd = 1))
l_val <- car::recode(l_val,"-Inf=-10^3") %>% sum
return(-l_val)
}
unif_dist <- 1/runif(n = n, min = -1,max = 1)
unif_dist
unif_dist %>% max
unif_dist %>% min
unif_dist <- 1/runif(n = n, min = -1,max = 1)
unif_dist %>% min
unif_dist %>% ,ax
unif_dist %>% max
unif_dist <- 1/runif(n = n, min = -1,max = 1)
unif_dist
unif_dist %>% max
unif_dist %>% min
l_val <- log(dnorm(x=unif_dist,mean = 0,sd = 1))
l_val
car::recode(l_val,"-Inf=-1000")
l_val <- car::recode(l_val,"-Inf=-1000") %>% sum
l_val
log_norm <- function(n,mu,sigma){
require(magrittr)
unif_dist <- 1/runif(n = n, min = -1,max = 1)
l_val <- log(dnorm(x=unif_dist,mean = 0,sd = 1))
l_val <- car::recode(l_val,"-Inf=-1000") %>% sum
return(-l_val)
}
cur_mu <- rnorm(n=1,mean = 0)
s_sigma <- 1
cur_lik <- log_lik(n=n_obs,mu=cur_mu,sigma=s_sigma,x=a)
cur_mu
s_sigma
cur_lik
# chain
sample <- matrix(nrow = iter, ncol = 2)
# Save last values
last_mu <- cur_mu
last_lik <- cur_lik
last_lik
# Step
cur_mu <- cur_mu + rnorm(n=1,mean = 0, sd=0.5)
cur_mu
log_lik(n=n_obs,x=b,mu=cur_mu,sigma=s_sigma)
log_norm(n=10000,mu=0,sigma=1)/1000
log_norm(n=10000,mu=0,sigma=1)/1000
log_norm(n=10000,mu=0,sigma=1)/1000
log_norm(n=10000,mu=0,sigma=1)/1000
log_norm(n=10000,mu=0,sigma=1)/1000
log_norm(n=10000,mu=0,sigma=1)/1000
log_norm(n=10000,mu=0,sigma=1)/1000
log_norm(n=10000,mu=0,sigma=1)/1000
log_norm(n=10000,mu=0,sigma=1)/1000
log_norm(n=10000,mu=0,sigma=1)/1000
log_norm(n=10000,mu=0,sigma=1)/1000
log_lik(n=n_obs,x=b,mu=cur_mu,sigma=s_sigma)
log_lik(n=n_obs,x=b,mu=cur_mu,sigma=s_sigma)
# Step
cur_mu <- cur_mu + rnorm(n=1,mean = 0, sd=0.5)
log_lik(n=n_obs,x=b,mu=cur_mu,sigma=s_sigma)
# Step
cur_mu <- cur_mu + rnorm(n=1,mean = 0, sd=0.5)
log_lik(n=n_obs,x=b,mu=cur_mu,sigma=s_sigma)
sample <- matrix(nrow = iter, ncol = 2)
for (i in 1:iter){
# Save last values
last_mu <- cur_mu
last_lik <- cur_lik
# Step
cur_mu <- cur_mu + rnorm(n=1,mean = 0, sd=0.5)
cur_lik <- log_lik(n=n_obs,x=b,mu=cur_mu,sigma=s_sigma) +
log_norm(n=10000,mu=0,sigma=1)/1000
if(cur_lik - last_lik > 5)
cur_mu <- last_mu
sample[i,] <- c(cur_mu,s_sigma)
}
mean(sample[1001:3000,1])
hist(b)
hist(b,100)
hist(b,30)
# chain
sample <- matrix(nrow = iter, ncol = 2)
for (i in 1:iter){
# Save last values
last_mu <- cur_mu
last_lik <- cur_lik
# Step
cur_mu <- cur_mu + rnorm(n=1,mean = 0, sd=0.5)
cur_lik <- log_lik(n=n_obs,x=a,mu=cur_mu,sigma=s_sigma) +
log_norm(n=10000,mu=0,sigma=1)/1000
if(cur_lik - last_lik > 5)
cur_mu <- last_mu
sample[i,] <- c(cur_mu,s_sigma)
}
mean(sample[1001:3000,1])
mean(a)
mean(b)
set.seed(2600)
dev.off
dev.off()
n_obs <- 400
a <- rnorm(n=n_obs, sd =1, mean=0)
b <- rnorm(n=n_obs, sd=1, mean=0.6)
set.seed(2600)
n_obs <- 400
iter <- 4000
a <- rnorm(n=n_obs, sd =1, mean=0)
b <- rnorm(n=n_obs, sd=1, mean=0.6)
likel <- function(n,x,mu,sigma){
l_val <- (-n/2)*log(2*pi*sigma^2) - (1/2*sigma^2)*sum((x - mu)^2)
return(-l_val) # multiplica(-1)
}
log_norm <- function(n,mu,sigma){
require(magrittr)
unif_dist <- 1/runif(n = n, min = -1,max = 1)
l_val <- log(dnorm(x=unif_dist,mean = 0,sd = 1))
l_val <- car::recode(l_val,"-Inf=-1000") %>% sum
return(-l_val)
}
# seeds
cur_mu <- rnorm(n=1,mean = 0)
s_sigma <- 1
cur_lik <- 0
# chain
sample <- matrix(nrow = iter, ncol = 2)
for (i in 1:iter){
# Save last values
last_mu <- cur_mu
last_lik <- cur_lik
# Step
cur_mu <- cur_mu + rnorm(n=1,mean = 0, sd=0.5)
cur_lik <- log_lik(n=n_obs,x=a,mu=cur_mu,sigma=s_sigma) +
log_norm(n=10000,mu=0,sigma=1)/1000
if(cur_lik - last_lik > 5)
cur_mu <- last_mu
sample[i,] <- c(cur_mu,s_sigma)
}
mean(sample[1001:3000,1])
mean(a)
sample <- matrix(nrow = iter, ncol = 2)
for (i in 1:iter){
# Save last values
last_mu <- cur_mu
last_lik <- cur_lik
# Step
cur_mu <- cur_mu + rnorm(n=1,mean = 0, sd=0.5)
cur_lik <- log_lik(n=n_obs,x=b,mu=cur_mu,sigma=s_sigma) +
log_norm(n=10000,mu=0,sigma=1)/1000
if(cur_lik - last_lik > 5)
cur_mu <- last_mu
sample[i,] <- c(cur_mu,s_sigma)
}
mean(sample[1001:3000,1])
# chain
mc_chain <- function(obs){
sample <- matrix(nrow = iter, ncol = 2)
for (i in 1:iter){
# Save last values
last_mu <- cur_mu
last_lik <- cur_lik
# Step
cur_mu <- cur_mu + rnorm(n=1,mean = 0, sd=0.5)
cur_lik <- log_lik(n=n_obs,x=obs,mu=cur_mu,sigma=s_sigma) +
log_norm(n=10000,mu=0,sigma=1)/1000
if(cur_lik - last_lik > 5)
cur_mu <- last_mu
sample[i,] <- c(cur_mu,s_sigma)
}
return(sample)
}
mc_chain(a)
mc_chain(b) %>% mean
mc_chain(b) %>% mean
# chain
mc_chain <- function(obs){
sample <- matrix(nrow = iter, ncol = 2)
for (i in 1:iter){
# Save last values
last_mu <- cur_mu
last_lik <- cur_lik
# Step
cur_mu <- cur_mu + rnorm(n=1,mean = 0, sd=0.5)
cur_lik <- log_lik(n=n_obs,x=obs,mu=cur_mu,sigma=s_sigma) +
log_norm(n=10000,mu=0,sigma=1)/1000
if(cur_lik - last_lik > 5)
cur_mu <- last_mu
sample[i,] <- c(cur_mu,s_sigma)
}
return(sample[1001:3000,1])
}
mc_chain(b) %>% mean
mc_chain <- function(obs,iter=4000,n_obs){
sample <- matrix(nrow = iter, ncol = 2)
for (i in 1:iter){
# Save last values
last_mu <- cur_mu
last_lik <- cur_lik
# Step
cur_mu <- cur_mu + rnorm(n=1,mean = 0, sd=0.5)
cur_lik <- log_lik(n=n_obs,x=obs,mu=cur_mu,sigma=s_sigma) +
log_norm(n=10000,mu=0,sigma=1)/1000
if(cur_lik - last_lik > 5)
cur_mu <- last_mu
sample[i,] <- c(cur_mu,s_sigma)
}
return(sample[1001:iter,1])
}
# chain
mc_chain <- function(obs,iter=4000,n_obs){
# seeds e objetos
sample <- matrix(nrow = iter, ncol = 2)
cur_mu <- rnorm(n=1,mean=0)
s_sigma <- 1
for (i in 1:iter){
# Save last values
last_mu <- cur_mu
last_lik <- cur_lik
# Step
cur_mu <- cur_mu + rnorm(n=1,mean = 0, sd=0.5)
cur_lik <- log_lik(n=n_obs,x=obs,mu=cur_mu,sigma=s_sigma) +
log_norm(n=10000,mu=0,sigma=1)/1000
if(cur_lik - last_lik > 5)
cur_mu <- last_mu
sample[i,] <- c(cur_mu,s_sigma)
}
return(sample[1001:iter,1])
}
# chain
mc_chain <- function(obs,iter=4000,n_obs=length(obs)){
# seeds e objetos
sample <- matrix(nrow = iter, ncol = 2)
cur_mu <- rnorm(n=1,mean=0)
s_sigma <- 1
for (i in 1:iter){
# Save last values
last_mu <- cur_mu
last_lik <- cur_lik
# Step
cur_mu <- cur_mu + rnorm(n=1,mean = 0, sd=0.5)
cur_lik <- log_lik(n=n_obs,x=obs,mu=cur_mu,sigma=s_sigma) +
log_norm(n=10000,mu=0,sigma=1)/1000
if(cur_lik - last_lik > 5)
cur_mu <- last_mu
sample[i,] <- c(cur_mu,s_sigma)
}
return(sample[1001:iter,1])
}
mc_chain(obs=b) %>% mean
s0_mu
s0_mu <- 0
s0_mu
# chain
mc_chain <- function(obs,iter=4000,n_obs=length(obs)){
# seeds e objetos
sample <- matrix(nrow = iter, ncol = 2)
s1_mu <- rnorm(n=1,mean=0) # media inicial
s_sigma <- 1 # variancia = 1
cur_lik <- 0
for (i in 1:iter){
# Salva estado
s0_mu <- s1_mu
s0_lik <- s1_lik
# Realiza um passo (random walk)
s1_mu <- s1_mu + rnorm(n=1,mean = 0, sd=0.5)
s1_lik <- log_lik(n=n_obs,x=obs,mu=s1_mu,sigma=s_sigma) +
# log do prior é normalizado por 1000
log_norm(n=10000,mu=0,sigma=1)/1000
# Rejeita diferenças maiores que 5, assumindo o valor no estado anterior
if(s1_lik - s0_lik > 5)
s1_mu <- s0_mu
sample[i,] <- c(s1_mu,s_sigma) # Salva
}
return(sample[1001:iter,1])
}
test_obj <- mc_chain(b)
mc_chain <- function(obs,iter=4000,n_obs=length(obs)){
# seeds e objetos
sample <- matrix(nrow = iter, ncol = 2)
s0_mu <- rnorm(n=1,mean=0) # media inicial
s_sigma <- 1 # variancia = 1
s0_lik <- 0
for (i in 1:iter){
# Salva estado
s1_mu <- s0_mu
s1_lik <- s0_lik
# Realiza um passo (random walk)
s1_mu <- s1_mu + rnorm(n=1,mean = 0, sd=0.5)
s1_lik <- log_lik(n=n_obs,x=obs,mu=s1_mu,sigma=s_sigma) +
# log do prior é normalizado por 1000
log_norm(n=10000,mu=0,sigma=1)/1000
# Rejeita diferenças maiores que 5, assumindo o valor no estado anterior
if(s1_lik - s0_lik > 5)
s1_mu <- s0_mu
sample[i,] <- c(s1_mu,s_sigma) # Salva
}
return(sample[1001:iter,1])
}
mc_chain <- function(obs,iter=4000,n_obs=length(obs)){
# seeds e objetos
sample <- matrix(nrow = iter, ncol = 2)
s0_mu <- rnorm(n=1,mean=0) # media inicial
s_sigma <- 1 # variancia = 1
s0_lik <- 0
for (i in 1:iter){
# Salva estado
s1_mu <- s0_mu
s1_lik <- s0_lik
# Realiza um passo (random walk)
s1_mu <- s1_mu + rnorm(n=1,mean = 0, sd=0.5)
s1_lik <- log_lik(n=n_obs,x=obs,mu=s1_mu,sigma=s_sigma) +
# log do prior é normalizado por 1000
log_norm(n=10000,mu=0,sigma=1)/1000
# Rejeita diferenças maiores que 5, assumindo o valor no estado anterior
if(s1_lik - s0_lik > 5)
s1_mu <- s0_mu
sample[i,] <- c(s1_mu,s_sigma) # Salva
}
return(sample[1001:iter,1])
}
test_obj <- mc_chain(b)
test_obj %>% mean
test_obj %>% hist()
test_obj %>% hist()
test_obj %>% hist()
test_obj %>% hist()
mc_chain <- function(obs,iter=4000,n_obs=length(obs)){
# seeds e objetos
sample <- matrix(nrow = iter, ncol = 2)
s0_mu <- rnorm(n=1,mean=0) # media inicial
s_sigma <- 1 # variancia = 1
s0_lik <- 2000
for (i in 1:iter){
# Salva estado
s1_mu <- s0_mu
s1_lik <- s0_lik
# Realiza um passo (random walk)
s1_mu <- s1_mu + rnorm(n=1,mean = 0, sd=0.5)
s1_lik <- log_lik(n=n_obs,x=obs,mu=s1_mu,sigma=s_sigma) +
# log do prior é normalizado por 1000
log_norm(n=10000,mu=0,sigma=1)/1000
# Rejeita diferenças maiores que 5, assumindo o valor no estado anterior
if(s1_lik - s0_lik > 5)
s1_mu <- s0_mu
sample[i,] <- c(s1_mu,s_sigma) # Salva
}
return(sample[1001:iter,1])
}
dev.off()
mc_chain <- function(obs,iter=4000,n_obs=length(obs)){
# seeds e objetos
sample <- matrix(nrow = iter, ncol = 2)
s0_mu <- rnorm(n=1,mean=0) # media inicial
s_sigma <- 1 # variancia = 1
s0_lik <- 2000
for (i in 1:iter){
# Salva estado
s1_mu <- s0_mu
s1_lik <- s0_lik
# Realiza um passo (random walk)
s1_mu <- s1_mu + rnorm(n=1,mean = 0, sd=0.5)
s1_lik <- log_lik(n=n_obs,x=obs,mu=s1_mu,sigma=s_sigma) +
# log do prior é normalizado por 1000
log_norm(n=10000,mu=0,sigma=1)/1000
# Rejeita diferenças maiores que 5, assumindo o valor no estado anterior
if(s1_lik - s0_lik > 5)
s1_mu <- s0_mu
sample[i,] <- c(s1_mu,s_sigma) # Salva
}
return(sample[1001:iter,1])
}
test_obj <- mc_chain(b)
mean(test_obj)
mc_chain <- function(obs,iter=4000,n_obs=length(obs)){
# seeds e objetos
sample <- matrix(nrow = iter, ncol = 2)
s1_mu <- rnorm(n=1,mean=0) # media inicial
s_sigma <- 1 # variancia = 1
s1_lik <- 2000
for (i in 1:iter){
# Salva estado
s0_mu <- s1_mu
s0_lik <- s1_lik
# Realiza um passo (random walk)
s1_mu <- s1_mu + rnorm(n=1,mean = 0, sd=0.5)
s1_lik <- log_lik(n=n_obs,x=obs,mu=s1_mu,sigma=s_sigma) +
# log do prior é normalizado por 1000
log_norm(n=10000,mu=0,sigma=1)/1000
# Rejeita diferenças maiores que 5, assumindo o valor no estado anterior
if(s1_lik - s0_lik > 5)
s1_mu <- s0_mu
sample[i,] <- c(s1_mu,s_sigma) # Salva
}
return(sample[1001:iter,1])
}
test_obj <- mc_chain(b)
test_obj %>% mean
set.seed(2600)
a <- rnorm(n=n_obs, sd =1, mean=0)
b <- rnorm(n=n_obs, sd=1, mean=0.6)
likel <- function(n,x,mu,sigma){
l_val <- (-n/2)*log(2*pi*sigma^2) - (1/2*sigma^2)*sum((x - mu)^2)
return(-l_val) # multiplica(-1)
}
log_norm <- function(n,mu,sigma){
require(magrittr)
unif_dist <- 1/runif(n = n, min = -1,max = 1)
l_val <- log(dnorm(x=unif_dist,mean = 0,sd = 1))
l_val <- car::recode(l_val,"-Inf=-1000") %>% sum
return(-l_val)
}
# chain
mc_chain <- function(obs,iter=4000,n_obs=length(obs)){
# seeds e objetos
sample <- matrix(nrow = iter, ncol = 2)
s1_mu <- rnorm(n=1,mean=0) # media inicial
s_sigma <- 1 # variancia = 1
s1_lik <- 2000
for (i in 1:iter){
# Salva estado
s0_mu <- s1_mu
s0_lik <- s1_lik
# Realiza um passo (random walk)
s1_mu <- s1_mu + rnorm(n=1,mean = 0, sd=0.5)
s1_lik <- log_lik(n=n_obs,x=obs,mu=s1_mu,sigma=s_sigma) +
# log do prior é normalizado por 1000
log_norm(n=10000,mu=0,sigma=1)/1000
# Rejeita diferenças maiores que 5, assumindo o valor no estado anterior
if(s1_lik - s0_lik > 5)
s1_mu <- s0_mu
sample[i,] <- c(s1_mu,s_sigma) # Salva
}
return(sample[1001:iter,1])
}
b_posterior <- mc_chain(b)
b_posterior <- mc_chain(b)
b_posterior $%$ mean
mean(b_posterior)
mean(b)
hist(b_posterior)
hist(b_posterior)
mean(b_posterior)
a_posterior <- mc_chain(a)
mean(a_posterior)
a_posterior - b_posterior
(a_posterior - b_posterior) %>% hist
(a_posterior - b_posterior) %>% hist(.,30)
