panel.grid = element_blank())
ggsave("images/chap4-nn.png",type="cairo-png",units="cm",dpi=300,width = 15,height=12)
library(network)
library(ggnetwork)
library(ggplot2)
sim_reg <- matrix(c(1,1,
0,1),ncol=2,nrow = 2)
sim_regn <- network(sim_reg)
set.vertex.attribute(sim_regn, attrname = "vertex.names",
value = c("Hale","Nº Médicos"))
sim_regn_plot <- ggnetwork(sim_regn)
ggplot(sim_regn_plot, aes(x = x, y = y,
xend = xend, yend = yend)) +
geom_nodes(color="gold",size=11) +
geom_edges(arrow = arrow(length = unit(5, "pt"),type = "closed"),
color = "white",
curvature = 0.1,size=0.25) +
geom_nodetext(aes(label = vertex.names),
fontface = "bold",size=1.35) +
xlim(-0.2,1.2)+ylim(-0.2,1.2)+
theme_minimal()+
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.background = element_rect(fill = "grey25"),
panel.grid = element_blank())
## Mult reg
mult_reg <- matrix(c(1,1,1,
0,1,0,
0,0,1),ncol=3,nrow = 3)
mult_regn <- network(mult_reg)
set.vertex.attribute(mult_regn, attrname = "vertex.names",
value = c("Hale","Nº Médicos","IDH"))
mult_regn_plot <- ggnetwork(mult_regn)
ggplot(mult_regn_plot, aes(x = x, y = y,
xend = xend, yend = yend)) +
geom_nodes(color="gold",size=11) +
geom_edges(arrow = arrow(length = unit(4, "pt"),
type = "closed"),
color = "white",
curvature = 0.2,size=0.15) +
geom_nodetext(aes(label = vertex.names),
fontface = "bold",size=1.35) +
xlim(-0.2,1.2)+ylim(-0.2,1.2)+
theme_minimal()+
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.background = element_rect(fill = "grey25"),
panel.grid = element_blank())
## CFA
cfa_reg <- matrix(c(1,0,0,0,0,0,1,
0,1,0,0,0,0,1,
0,0,1,0,0,1,0,
0,0,0,1,0,1,0,
0,0,0,0,1,1,0,
0,0,0,0,0,1,0,
0,0,0,0,0,0,1),ncol=7,nrow = 7)
cfa_regn <- network(cfa_reg)
set.vertex.attribute(cfa_regn, attrname = "vertex.names",
value = c("X1","X2","X3","X4","X5","F1","F2"))
cfa_regn_plot <- ggnetwork(cfa_regn)
ggplot(cfa_regn_plot, aes(x = x, y = y,
xend = xend, yend = yend)) +
geom_nodes(color="gold",size=11) +
geom_edges(arrow = arrow(length = unit(4, "pt"),
type = "closed"),
color = "white",
curvature = 0.5,size=0.15) +
geom_nodetext(aes(label = vertex.names),
fontface = "bold",size=1.35) +
xlim(-0.2,1.2)+ylim(-0.2,1.2)+
theme_minimal()+
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.background = element_rect(fill = "grey25"),
panel.grid = element_blank())
## Cover
big_reg <- matrix(c(1,0,0,0,0,0,1,1,1,1,
0,1,0,0,0,0,1,1,1,1,
0,0,1,0,0,1,0,1,0,0,
0,0,0,1,0,1,0,0,0,0,
0,0,0,0,1,1,0,0,0,0,
0,1,1,0,0,1,0,0,0,0,
0,0,0,0,0,0,1,1,1,1,
0,0,1,0,0,0,1,1,1,1,
0,1,0,0,0,0,1,1,1,1,
0,0,0,0,0,0,1,1,1,1),ncol=10,nrow = 10)
big_regn <- network(big_reg)
set.vertex.attribute(big_regn, attrname = "vertex.names",
value = c(""))
big_regn_plot <- ggnetwork(big_regn)
ggplot(big_regn_plot, aes(x = x, y = y,
xend = xend, yend = yend)) +
geom_nodes(color="gold",size=11) +
geom_edges(arrow = arrow(length = unit(4, "pt"),
type = "closed"),
color = "white",
curvature = 0.3,size=0.15) +
geom_nodetext(aes(label = vertex.names),
fontface = "bold",size=1.35) +
xlim(-0.2,1.2)+ylim(-0.2,1.2)+
theme_minimal()+
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.background = element_rect(fill = "grey25"),
panel.grid = element_blank())
## Mark ii reg
mark_reg <- matrix(c(1,0,0,0,0,0,
1,1,0,0,0,0,
0,1,1,0,0,0,
0,1,0,1,0,0,
0,0,1,1,1,0,
0,0,0,0,1,1),ncol=6,nrow = 6)
mark_regn <- network(mark_reg)
set.vertex.attribute(mark_regn, attrname = "vertex.names",
value = c("X","W1","W21","W22","+","Y"))
mark_regn_plot <- ggnetwork(mark_regn)
ggplot(mark_regn_plot, aes(x = x, y = y,
xend = xend, yend = yend)) +
geom_nodes(color="light blue",size=11) +
geom_edges(arrow = arrow(length = unit(4, "pt"),
type = "closed"),
color = "grey70",
curvature = 0.3,size=0.15) +
geom_nodetext(aes(label = vertex.names),
fontface = "bold",size=3) +
xlim(-0.2,1.2)+ylim(-0.2,1.2)+
theme_minimal()+
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.background = element_rect(fill = "white"),
panel.grid = element_blank())
## Med
mult_reg <- matrix(c(1,1,1,
0,1,1,
0,0,1),ncol=3,nrow = 3)
mult_regn <- network(mult_reg)
set.vertex.attribute(mult_regn, attrname = "vertex.names",
value = c("Hale","Nº Médicos","IDH"))
mult_regn_plot <- ggnetwork(mult_regn)
ggplot(mult_regn_plot, aes(x = x, y = y,
xend = xend, yend = yend)) +
geom_nodes(color="gold",size=11) +
geom_edges(arrow = arrow(length = unit(4, "pt"),
type = "closed"),
color = "white",
curvature = 0.2,size=0.15) +
geom_nodetext(aes(label = vertex.names),
fontface = "bold",size=1.35) +
xlim(-0.2,1.2)+ylim(-0.2,1.2)+
theme_minimal()+
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.background = element_rect(fill = "grey25"),
panel.grid = element_blank())
## Med
mult_reg <- matrix(c(1,0,0,
1,1,0,
1,1,1),ncol=3,nrow = 3)
mult_regn <- network(mult_reg)
## Med
mult_reg <- matrix(c(1,0,0,
1,1,0,
1,1,1),ncol=3,nrow = 3)
mult_regn <- network(mult_reg)
set.vertex.attribute(mult_regn, attrname = "vertex.names",
value = c("X","Mediador","Y"))
mult_regn_plot <- ggnetwork(mult_regn)
ggplot(mult_regn_plot, aes(x = x, y = y,
xend = xend, yend = yend)) +
geom_nodes(color="gold",size=11) +
geom_edges(arrow = arrow(length = unit(4, "pt"),
type = "closed"),
color = "white",
curvature = 0.2,size=0.15) +
geom_nodetext(aes(label = vertex.names),
fontface = "bold",size=1.35) +
xlim(-0.2,1.2)+ylim(-0.2,1.2)+
theme_minimal()+
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.background = element_rect(fill = "grey25"),
panel.grid = element_blank())
ggsave("images/chap3-med.png",type="cairo-png",units="cm",dpi=300,width = 15,height=12)
ggsave("images/chap3-med.png",type="cairo-png",units="cm",dpi=300,width = 12,height=8)
ggsave("images/chap3-med.png",type="cairo-png",units="cm",dpi=300,width = 10,height=7)
sobel()
psych::i
lm(Sepal.Length ~ Sepal.Width,data = iris)
fit1 <- lm(Sepal.Length ~ Sepal.Width,data = iris)
install.packages("multileve")
install.packages("multilevel")
?multilevel::sobel
sobel(pred=bh1996$HRS,med=bh1996$LEAD,out=bh1996$WBEING)
multilevel::sobel(pred=bh1996$HRS,med=bh1996$LEAD,out=bh1996$WBEING)
data(bh1996)
library(multilevel)
data(bh1996)
multilevel::sobel(pred=bh1996$HRS,med=bh1996$LEAD,out=bh1996$WBEING)
multilevel::sobel(pred=bh1996$HRS,med=bh1996$LEAD,out=bh1996$WBEING)
0.043 - 0.0652
multilevel::sobel(pred=bh1996$HRS,med=bh1996$LEAD,out=bh1996$WBEING) %>% summary
library(magrittr)
multilevel::sobel(pred=bh1996$HRS,med=bh1996$LEAD,out=bh1996$WBEING) %>% summary
multilevel::sobel(pred=bh1996$HRS,med=bh1996$LEAD,out=bh1996$WBEING) %>% plot
multilevel::sobel(pred=bh1996$HRS,med=bh1996$LEAD,out=bh1996$WBEING) %>% print
install.packages("bda")
bda::mediation.test(iv = bh1996$HRS,mv = bh1996$LEAD,dv = bh1996$WBEING)
multilevel::sobel(pred=bh1996$HRS,med=bh1996$LEAD,out=bh1996$WBEING) %>% print
bda::mediation.test(iv = bh1996$HRS,mv = bh1996$LEAD,dv = bh1996$WBEING)
fit_yx1 <- lm(WBEING ~ bh1996$HRS, bh1996)
>fit_yx1 <- lm(WBEING ~ HRS, bh1996)
>fit_yx2 <- lm(WBEING ~ LEAD, data)
# Mediation
>fit_yx1x2 <- lm(WBEING ~ HRS + LEAD)
fit_yx1 <- lm(WBEING ~ bh1996$HRS, bh1996)
fit_yx2 <- lm(WBEING ~ LEAD, data)
fit_yx2 <- lm(WBEING ~ LEAD, bh1996)
fit_yx2 <- lm(WBEING ~ HRS + LEAD , bh1996)
multilevel::sobel(pred=bh1996$HRS,med=bh1996$LEAD,out=bh1996$WBEING) %>% print
multilevel::sobel(pred=bh1996$HRS,med=bh1996$LEAD,out=bh1996$WBEING)
sobel(pred=bh1996$HRS,med=bh1996$LEAD,out=bh1996$WBEING)
sobel(pred=bh1996$HRS,med=bh1996$LEAD,out=bh1996$WBEING)
?bh1996
bh1996$LEAD
pairs(iris)
?pairs
vec_log <- c(TRUE,FALSE,T,F,TRUE,F,F)
v1 <- (2.22, 3.3, 3.2, 4.5, 5.9)
v2 <- (2.22, 3.2, 4.2, 0.5, 10.9)
v1 <- c(2.22, 3.3, 3.2, 4.5, 5.9)
v2 <- c(2.22, 3.2, 4.2, 0.5, 10.9)
v1
v2
type(v1)
class(v1)
typeof(v1)
vec_log <- c(T,F,T,F,T,F,F)
vec_log <- c(TRUE,FALSE,T,F,T,F,F)
v1 <- c(2.22, 3.3, 3.2, 4.5, 5.9)
v2 <- c(2.22, 3.2, 4.2, 0.5, 10.9)
typeof(v1)
typeof(v2)
v1 + v2
v1 / v2
sa <- rnorm(n=10)
sb <- rnorm(n=30)
sc <- rnorm(n=100)
sd <- rnorm(n=300)
mean(sa)
sa
sb <- rnorm(n=30)
sc <- rnorm(n=100)
sd <- rnorm(n=300)
mean(sb)
mean(sc)
mean(sd)
library(magrittr)
%>%
round ( mean ( c(10 , 2, 3 ) )
round ( mean ( c(10 , 2, 3 ) ))
mean(c(10 , 2, 3 )) %>% round
mean ( c(10 , 2, 3 ))
library(magrittr)
mean(c(10 , 2, 3 )) %>% round
runif (1,0,10)
?runif
ceiling(2.92)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .) %>% mean
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
runif(1,0,10) %>% ceiling %>% round %>% rnorm(n = .)
paste(“a”,seq(1:rnorm(n=mean(c(3,2,1,16)))))
paste("a",seq(1:rnorm(n=mean(c(3,2,1,16)))))
library(magrittr)
c(10 , 2, 3 ) %>% mean %>% round
runif (1,0,10) %>% ceiling %>% rnorm (n = .) %>%
mean %>% round
runif (1,0,10) %>% ceiling %>% rnorm (n = .) %>%
mean %>% round
runif (1,0,10) %>% ceiling %>% rnorm (n = .) %>%
mean %>% round
runif (1,0,10) %>% ceiling %>% rnorm (n = .)
%>%
mean %>% round
runif (1,0,10) %>% ceiling %>% rnorm (n = .)
runif (1,0,10) %>% ceiling %>% rnorm (n = .)
runif (1,0,10) %>% ceiling %>% rnorm (n = .)
runif (1,0,10) %>% ceiling %>% rnorm (n = .)
runif (1,0,10) %>% ceiling %>% rnorm (n = .)
runif (1,0,10)
c(3,2,1,16) %>% mean %>% sample.int %>% seq(1:.) %>%
paste("a")
c(3,2,1,16) %>% mean %>% sample.int %>% seq(from=1,
to =.) %>%
paste("a")
c(3,2,1,16) %>% mean %>% sample.int %>% seq(from=1,
to=.,by = 1) %>%
paste("a")
c(3,2,1,16) %>% mean %>% sample.int
c(3,2,1,16) %>% mean %>% sample.int(n = 1) %>% seq(from=1,
to=.,by = 1) %>%
paste("a")
c(3,2,1,16) %>% mean %>% sample.int(n = 1,replace=T) %>% seq(from=1,
to=.,by = 1) %>%
paste("a")
paste("a",seq(1:sample.int(n=mean(c(3,2,1,16)))))
mean(c(3,2,1,16))
paste("a",seq(1:sample.int(n=round(mean(c(3,2,1,16))))))
paste("a",seq(1:sample.int(n=max(mean(c(3,2,1,16))))))
paste(“a”,seq(1:sample.int(n=mean(c(3,2,1,16)))))
paste("a",seq(1:sample.int(n=mean(c(3,2,1,16)))))
paste("a",seq(1:sample.int(n=1))))
paste("a",seq(1:sample.int(n=1)))
paste("a",seq(1:sample.int(n=1)))
paste("a",seq(1:sample.int(n = 1)))
paste("a",seq(1:sample.int(n = 1)))
paste("a",seq(1:sample.int(n = 1)))
paste("a",seq(1:sample.int(n = 1)))
lapply(paste("a"),seq(1:sample.int(n = 1)))
lapply(paste("a"),X = seq(1:sample.int(n = 1)))
lapply(function(x) paste("a",x),X = seq(1:sample.int(n = 1)))
lapply(function(x) paste("a",x),X = seq(1:sample.int(n = 1)))
lapply(function(x) paste("a",x),X = seq(1:sample.int(n = 1)))
seq(1:sample.int(n = 1))
seq(1:sample.int(n = 1))
seq(1:sample.int(n = 1))
sample.int(n = 1)
sample.int(n = 1)
sample.int(n = 1)
sample.int()
sample.int
sample.int()
sample.int(n=10)
sample.int(n=1)
sample.int(n=1)
sample.int(n=2)
sample.int(n=2)
sample.int(n=2)
sample.int(n=3)
sample.int(replace = T)
sample.int(n=1,replace = T)
sample.int(n=1,replace = T)
sample()
sample(1:10)
paste("a",seq(1:sample(c(3,2,1,16))))
paste("a",seq(1:sample(1:10)))
seq(1:sample(1:10)
)
seq(1:sample(1:10))
seq(1:sample(1:10))
seq(1:sample(1:10))
seq(1:sample(1:10))
seq(1:sample(1:10))
seq(1:sample(1:10))
paste("a",seq(1:sample(1:10)))
paste("a",seq(1:sample(1:10)))
paste("a",seq(1:sample(1:10)))
paste("a",seq(1:max(sample(1:10))))
library(magrittr)
mean(c(10 , 2, 3)) %>% round
c(10 , 2, 3) %>% mean %>% round
round (mean ( rnorm (n = ceiling (runif (1,0,10)))))
round (mean ( rnorm (n = ceiling (runif (1,0,10)))))
round (mean ( rnorm (n = ceiling (runif (1,0,10)))))
round (mean ( rnorm (n = ceiling (runif (1,0,10)))))
round (mean ( rnorm (n = ceiling (runif (1,0,10)),mean = 3)))
round (mean ( rnorm (n = ceiling (runif (1,0,10)),mean = 2)))
runif (1,0,10) %>% ceiling %>% rnorm %>%
mean %>% round
runif (1,0,10) %>% ceiling %>% rnorm %>%
mean(mean=2) %>% round
runif (1,0,10) %>% ceiling %>% rnorm %>%
mean(mean=2) %>% round
runif (1,0,10) %>% ceiling %>% rnorm %>%
mean(mean=2) %>% round
runif (1,0,10) %>% ceiling %>% rnorm(mean=2) %>%
mean %>% round
paste(“a”,seq(1:max(sample(1:10))))
paste("a",seq(1:max(sample(1:10))))
paste("a",seq(1:max(sample(1:10))))
paste("a",seq(1:max(sample(1:10))))
paste("a",seq(1:max(sample(1:10))))
paste("a",seq(1:max(sample(1:10))))
paste("a",seq(1:max(sample(1:10))))
paste("a",seq(1:max(sample(1:10))))
sample(1:10) %>% max %>% seq(1:.) %>% paste("a",.)
sample(1:10) %>% max %>% seq(1,.) %>% paste("a",.)
exp(1)
(nrow(iris) + exp(1)) %>%
round(.,digits = runif(1,0,10) %>% ceiling)
(nrow(iris) + exp(1)) %>%
round(.,digits = runif(1,0,10) %>% ceiling)
(nrow(iris) + exp(1)) %>%
round(.,digits = runif(1,0,10) %>% ceiling)
(nrow(iris) + exp(1)) %>%
round(.,digits = runif(1,0,10) %>% ceiling)
(nrow(iris) + exp(1)) %>%
round(.,digits = runif(1,0,10) %>% ceiling)
(nrow(iris) + exp(1)) %>%
round(.,digits = runif(1,0,10) %>% ceiling)
var_2 <- function(x) sum((x - mean(x))^2) / (length(x) - 1)
var_3 <- function(x){
accumulator <- numeric() #armazena distâncias
for (i in 1:length(x)) # loop começa em 1 segue até o tamanho do vetor
accumulator[i] <- (x[i] - mean(x))^2 # calcula e armazena distâncias.
return (sum (accumulator) / (length(x) - 1) ) #calcula media
}
var_4 <- function(arg){
purrr::map(.f = function(y) (y - mean(arg))^2, .x = arg) %>%
unlist %>% sum(.)/(length(arg) - 1)
}
library(magrittr)
sd_2 <- function(x) (sum((x - mean(x))^2) / (length(x) - 1)) %>% sqrt
c(1,3,12,5,12,12,41,2,123,123,12,5)
v_test <- c(1,3,12,5,12,12,41,2,123,123,12,5)
sd(v_test)
sd_2(v_test)
var_3 <- function(x){
accumulator <- numeric() #armazena distâncias
for (i in 1:length(x)) # loop começa em 1 segue até o tamanho do vetor
accumulator[i] <- (x[i] - mean(x))^2 # calcula e armazena distâncias.
return ((sum (accumulator) / (length(x) - 1)) %>% sqrt) #calcula media
}
sd_3 <- function(x){
accumulator <- numeric() #armazena distâncias
for (i in 1:length(x)) # loop começa em 1 segue até o tamanho do vetor
accumulator[i] <- (x[i] - mean(x))^2 # calcula e armazena distâncias.
return ((sum (accumulator) / (length(x) - 1)) %>% sqrt) #calcula media
}
sd(v_test)
sd_3(v_test)
sd_4 <- function(arg){
purrr::map(.f = function(y) (y - mean(arg))^2, .x = arg) %>%
unlist %>% sum(.)/(length(arg) - 1) %>% sqrt
}
sd_4(v_test)
var_4(v_test)
var_2(v_test)
sd_4 <- function(arg){
purrr::map(.f = function(y) (y - mean(arg))^2, .x = arg) %>%
unlist %>% (sum(.)/(length(arg) - 1) %>% sqrt)
}
sd_4(v_test)
purrr::map(.f = function(y) (y - mean(arg))^2, .x = arg) %>%
unlist %>% sum(.)/(length(arg) - 1) %>% sqrt
sd_4 <- function(arg){
purrr::map(.f = function(y) (y - mean(arg))^2, .x = arg) %>%
unlist %>% sum(.)/(length(arg) - 1) %>% sqrt
}
sd_4(v_test)
sd_4 <- function(arg){
purrr::map(.f = function(y) (y - mean(arg))^2, .x = arg) %>%
unlist %>% sum(.)/(length(arg) - 1) %>% sqrt
}
sd_4(v_test)
var_4(v_test)
var_2(v_test)
sd_4 <- function(arg){
t_var <- purrr::map(.f = function(y) (y - mean(arg))^2, .x = arg) %>%
unlist %>% sum(.)/(length(arg) - 1)
sqrt(t_var)
}
sd_4(v_test)
sd_2(v_test)
var_2 <- function(x) sum((x - mean(x))^2) / (length(x) - 1)
sd_2 <- function(x) (sum((x - mean(x))^2) / (length(x) - 1)) %>% sqrt
v_test
sd(v_test)
sd_2(v_test)
var_3 <- function(x){
accumulator <- numeric() #armazena distâncias
for (i in 1:length(x)) # loop começa em 1 segue até o tamanho do vetor
accumulator[i] <- (x[i] - mean(x))^2 # calcula e armazena distâncias.
variance <- sum (accumulator) / (length(x) - 1)
return (variance %>% sqrt) #calcula media
}
sd_3 <- function(x){
accumulator <- numeric() #armazena distâncias
for (i in 1:length(x)) # loop começa em 1 segue até o tamanho do vetor
accumulator[i] <- (x[i] - mean(x))^2 # calcula e armazena distâncias.
variance <- sum (accumulator) / (length(x) - 1)
return (variance %>% sqrt) #calcula media
}
sd(v_test)
sd_3(v_test)
sd_4 <- function(arg){
variance <- purrr::map(.f = function(y) (y - mean(arg))^2, .x = arg) %>%
unlist %>% sum(.)/(length(arg) - 1)
return(sqrt(variance))
}
sd_4(v_test)
