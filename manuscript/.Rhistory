plot(1:10, err, type="l", lwd=2, col="red", xlab="epoch #", ylab="errors")
err <- perceptron(x, y, 0.11, 10)
plot(1:10, err, type="l", lwd=2, col="red", xlab="epoch #", ylab="errors")
err <- perceptron(x, y, 0.105, 10)
plot(1:10, err, type="l", lwd=2, col="red", xlab="epoch #", ylab="errors")
err <- perceptron(x, y, 0.102, 10)
plot(1:10, err, type="l", lwd=2, col="red", xlab="epoch #", ylab="errors")
err <- perceptron(x, y, 0.103, 10)
plot(1:10, err, type="l", lwd=2, col="red", xlab="epoch #", ylab="errors")
w <- rep(0,(dim(x))
errors <- rep(0, niter)
for (j in 1:niter) {
for (i in 1:length(y)) {
z <- sum(w * as.numeric(x[i, ]))
ypred <- ifelse(z >=0,1,-1)
delta_w <- eta * (y[i] - ypred) * as.numeric(x[i, ])
w <- w + delta_w
if ((y[i] - ypred) != 0.0) {
errors[j] <- errors[j] + 1
}
}
}
# weight to decide between the two species
print(w)
return(errors)
}
err <- perceptron(x, y, 1, 10)
}
w <- rep(0,(dim(x)))
perceptron <- function(x, y, eta, niter) {
w <- rep(0,(dim(x)))
errors <- rep(0, niter)
for (j in 1:niter) {
for (i in 1:length(y)) {
z <- sum(w * as.numeric(x[i, ]))
ypred <- ifelse(z >=0,1,-1)
delta_w <- eta * (y[i] - ypred) * as.numeric(x[i, ])
w <- w + delta_w
if ((y[i] - ypred) != 0.0) {
errors[j] <- errors[j] + 1
}
}
}
# weight to decide between the two species
print(w)
return(errors)
}
err <- perceptron(x, y, 1, 10)
perceptron <- function(x, y, eta, niter) {
w <- rep(0,(dim(x)))
errors <- rep(0, niter)
for (j in 1:niter) {
for (i in 1:length(y)) {
z <- sum(w * as.numeric(x[i, ]))
ypred <- ifelse(z >=0,1,-1)
delta_w <- eta * (y[i] - ypred) * as.numeric(x[i, ])
w <- w + delta_w
if ((y[i] - ypred) != 0.0) {
errors[j] <- errors[j] + 1
}
}
}
# weight to decide between the two species
print(w)
return(errors)
}
err <- perceptron(x, y, 1, 10)
dim(x)
perceptron <- function(x, y, eta, niter) {
w <- rep(0, times=dim(x)[2])
errors <- rep(0, niter)
for (j in 1:niter) {
for (i in 1:length(y)) {
z <- sum(w * as.numeric(x[i, ]))
ypred <- ifelse(z >=0,1,-1)
delta_w <- eta * (y[i] - ypred) * as.numeric(x[i, ])
w <- w + delta_w
if ((y[i] - ypred) != 0.0) {
errors[j] <- errors[j] + 1
}
}
}
# weight to decide between the two species
print(w)
return(errors)
}
err <- perceptron(x, y, 1, 10)
plot(1:10, err, type="l", lwd=2, col="red", xlab="epoch #", ylab="errors")
err <- perceptron(x, y, 0.5, 10)
plot(1:10, err, type="l", lwd=2, col="red", xlab="epoch #", ylab="errors")
perceptron <- function(x, y, eta, niter) {
w <- rep(0, times=dim(x)[2])
errors <- rep(0, niter)
for (j in 1:niter) {
for (i in 1:length(y)) {
z <- sum(w * as.numeric(x[i, ]))
ypred <- ifelse(z >=0,1,-1)
delta_w <- eta * (y[i] - ypred) * as.numeric(x[i, ])
w <- w + delta_w
if ((y[i] - ypred) != 0.0) {
errors[j] <- errors[j] + 1
}
}
}
# weight to decide between the two species
print(w)
return(errors)
}
err <- perceptron(x, y, 1, 10)
plot(1:10, err, type="l", lwd=2, col="red", xlab="epoch #", ylab="errors")
err <- perceptron(x, y, 0.05, 10)
plot(1:10, err, type="l", lwd=2, col="red", xlab="epoch #", ylab="errors")
err <- perceptron(x, y, 0.005, 10)
plot(1:10, err, type="l", lwd=2, col="red", xlab="epoch #", ylab="errors")
err <- perceptron(x, y, 0.0005, 10)
plot(1:10, err, type="l", lwd=2, col="red", xlab="epoch #", ylab="errors")
perceptron <- function(x, y, eta, niter) {
w <- rnorm(dim(x)[2])
for (j in 1:niter) {
for (i in 1:length(y)) {
z <- sum(w * as.numeric(x[i, ]))
ypred <- ifelse(z >=0,1,-1)
delta_w <- eta * (y[i] - ypred) * as.numeric(x[i, ])
w <- w + delta_w
if ((y[i] - ypred) != 0.0) {
errors[j] <- errors[j] + 1
}
}
}
# weight to decide between the two species
print(w)
return(errors)
}
err <- perceptron(x, y, 1)
perceptron <- function(x, y, eta) {
w <- rnorm(dim(x)[2])
for (i in 1:length(y)) {
z <- sum(w * as.numeric(x[i, ]))
ypred <- ifelse(z >=0,1,-1)
delta_w <- eta * (y[i] - ypred) * as.numeric(x[i, ])
w <- w + delta_w
if ((y[i] - ypred) != 0.0) {
errors[j] <- errors[j] + 1
}
}
# weight to decide between the two species
print(w)
return(errors)
}
err <- perceptron(x, y, 1)
plot(1:10, err, type="l", lwd=2, col="red", xlab="epoch #", ylab="errors")
err
perceptron <- function(x, y, eta) {
w <- rnorm(dim(x)[2])
for (i in 1:length(y)) {
z <- sum(w * as.numeric(x[i, ]))
ypred <- ifelse(z >=0,1,-1)
delta_w <- eta * (y[i] - ypred) * as.numeric(x[i, ])
w <- w + delta_w
}
# weight to decide between the two species
print(w)
}
err <- perceptron(x, y, 1)
x
rnorm(dim(x)[2])
perceptron <- function(x, y, eta) {
w <- rnorm(dim(x)[2])
for (i in 1:length(y)) {
z <- sum(w * as.numeric(x[i, ]))
ypred <- ifelse(z >=0,1,-1)
delta_w <- eta * (y[i] - ypred) * as.numeric(x[i, ])
w <- w + delta_w
}
# weight to decide between the two species
print(w)
}
err <- perceptron(x, y, 1)
err
perceptron <- function(x, y, eta) {
w <- rnorm(dim(x)[2])
for (i in 1:length(y)) {
z <- sum(w * as.numeric(x[i, ]))
ypred <- ifelse(z >=0,1,-1)
delta_w <- eta * (y[i] - ypred) * as.numeric(x[i, ])
w <- w + delta_w
}
# weight to decide between the two species
print(w)
}
perceptron <- function(x, y, eta) {
w <- rnorm(dim(x)[2])
for (i in 1:length(y)) {
z <- sum(w * as.numeric(x[i, ]))
ypred <- ifelse(z >=0,1,-1)
delta_w <- eta * (y[i] - ypred) * as.numeric(x[i, ])
w <- w + delta_w
}
# weight to decide between the two species
print(w)
return(ypred)
}
y_preds <- perceptron(x, y, 1)
y_preds
perceptron <- function(x, y, eta) {
w <- rnorm(dim(x)[2])
for (i in 1:length(y)) {
z <- sum(w * as.numeric(x[i, ]))
ypred <- ifelse(z >=0,1,-1)
ypreds[i] <- ypred
delta_w <- eta * (y[i] - ypred) * as.numeric(x[i, ])
w <- w + delta_w
}
# weight to decide between the two species
print(w)
return(ypreds)
}
y_preds <- perceptron(x, y, 1)
perceptron <- function(x, y, eta) {
w <- rnorm(dim(x)[2])
ypreds <- rep(0,dim(x)[1])
for (i in 1:length(y)) {
z <- sum(w * as.numeric(x[i, ]))
ypred <- ifelse(z >=0,1,-1)
ypreds[i] <- ypred
delta_w <- eta * (y[i] - ypred) * as.numeric(x[i, ])
w <- w + delta_w
}
# weight to decide between the two species
print(w)
return(ypreds)
}
y_preds <- perceptron(x, y, 1)
y_preds
train_df[, 4] <- -1
train_df[train_df[, 3] == "setosa", 4] <- 1
x <- train_df[, c(1, 2)]
y <- train_df[, 4]
perceptron <- function(x, y, eta) {
w <- rnorm(dim(x)[2])
ypreds <- rep(0,dim(x)[1])
for (i in 1:length(y)) {
z <- sum(w * as.numeric(x[i, ]))
ypred <- ifelse(z >=0,1,-1)
ypreds[i] <- ypred
delta_w <- eta * (y[i] - ypred) * as.numeric(x[i, ])
w <- w + delta_w
}
# weight to decide between the two species
print(w)
return(ypreds)
}
y_preds <- perceptron(x, y, 1)
y_preds
eq <- f(x1,x2) {x1*14.119289 + x2-5.959627}
eq <- function(x1,x2) {x1*14.119289 + x2-5.959627}
plot(eq(1:100,1:100),type="l")
plot(eq(0:10,0:10),type="l")
ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width,color=Species))+
geom_point()+
geom_abline(slope = 0.92,intercept = -1.9)+
stat_function(fun=percep_final, geom="line")
percep_final <- function(x1,x2) {x1*14.119289 + x2-5.959627}
ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width,color=Species))+
geom_point()+
geom_abline(slope = 0.92,intercept = -1.9)+
stat_function(fun=percep_final, geom="line")
ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width,color=Species))+
geom_point()+
#  geom_abline(slope = 0.92,intercept = -1.9)+
stat_function(fun=percep_final, geom="line")
ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width,color=Species))+
geom_point()+
#  geom_abline(slope = 0.92,intercept = -1.9)+
stat_function(fun=percep_final(x1=x,x2=y), geom="line")
class(percep_final)
names(train_df)
ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width,color=Species))+
geom_point()+
#  geom_abline(slope = 0.92,intercept = -1.9)+
stat_function(data=train_df,mapping = aes(x=s.len,y=s.wid),
fun=percep_final(x1=,x2=y), geom="line")
ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width,color=Species))+
geom_point()+
#  geom_abline(slope = 0.92,intercept = -1.9)+
stat_function(data=train_df,mapping = aes(x=s.len,y=s.wid),
fun=percep_final(x1=x,x2=y), geom="line")
ggplot(train_df,aes(x=s.len,y=s.wid,color=species))+
geom_point()+
#  geom_abline(slope = 0.92,intercept = -1.9)+
stat_function(data=train_df,mapping = aes(x=s.len,y=s.wid),
fun=percep_final(x1=x,x2=y), geom="line")
percep_final <- function(x1,x2) {x1*14.119289 + x2-5.959627}
ggplot(train_df,aes(x=s.len,y=s.wid,color=species))+
geom_point()+
#  geom_abline(slope = 0.92,intercept = -1.9)+
stat_function(data=train_df,mapping = aes(x=s.len,y=s.wid),
fun=percep_final, geom="line")
ggplot(train_df,aes(x=s.len,y=s.wid,color=species))+
geom_point()+
#  geom_abline(slope = 0.92,intercept = -1.9)+
stat_function(data=train_df,mapping = aes(x=s.len,y=s.wid),
fun=percep_final(x2=s.wid), geom="line")
ggplot(train_df,aes(x=s.len,y=s.wid,color=species))+
geom_point()+
#  geom_abline(slope = 0.92,intercept = -1.9)+
stat_function(data=train_df,mapping = aes(x=s.len,y=s.wid),
fun=percep_final(x1=s.len,x2=s.wid), geom="line")
ggplot(train_df,aes(x=s.len,y=s.wid,color=species))+
geom_point()+
#  geom_abline(slope = 0.92,intercept = -1.9)+
stat_function(data=train_df,mapping = aes(x=s.len,y=s.wid),
fun=percep_final(x1=x,x2=y), geom="line")
ggplot(train_df,aes(x=s.len,y=s.wid,color=species))+
geom_point()+
#  geom_abline(slope = 0.92,intercept = -1.9)+
stat_function(data=train_df,mapping = aes(x=s.len,y=s.wid),
fun=percep_final,args=list(train_df$s.len,train_df$s.wid),
geom="line")
ggplot(train_df,aes(x=s.len,y=s.wid,color=species))+
geom_point()+
#  geom_abline(slope = 0.92,intercept = -1.9)+
stat_function(fun=percep_final,args=list(train_df$s.len,train_df$s.wid),
geom="line")
ggplot(train_df,aes(x=s.len,y=s.wid,color=species))+
geom_point()+
#  geom_abline(slope = 0.92,intercept = -1.9)+
stat_function(fun=percep_final,args=list(x1=train_df$s.len,x2=train_df$s.wid),
geom="line")
ggplot(train_df,aes(x=s.len,y=s.wid,color=species))+
geom_point()+
#  geom_abline(slope = 0.92,intercept = -1.9)+
stat_function(fun=percep_final,args=list(x2=train_df$s.wid),
geom="line")
ggplot(train_df,aes(x=s.len,y=s.wid,color=species))+
geom_point()+
#  geom_abline(slope = 0.92,intercept = -1.9)+
stat_function(fun=percep_final(x1=x),args=list(x2=train_df$s.wid),
geom="line")
ggplot(train_df,aes(x=s.len,y=s.wid,color=species))+
geom_point()+
#  geom_abline(slope = 0.92,intercept = -1.9)+
stat_function(fun=percep_final,args=list(x2=train_df$s.wid),
geom="line")
ggplot(train_df,aes(x=s.len,y=s.wid,color=species))+
geom_point()+
#  geom_abline(slope = 0.92,intercept = -1.9)+
stat_function(fun=percep_final,args=list(x1=train_df$s.len,x2=train_df$s.wid),
geom="line")
?stat_function
ggplot(train_df,aes(x=s.len,y=s.wid,color=species))+
geom_point()+
#  geom_abline(slope = 0.92,intercept = -1.9)+
stat_function(fun=percep_final(x),args=list(x1=train_df$s.len,x2=train_df$s.wid),
geom="line")
ggplot(train_df,aes(x=s.len,y=s.wid,color=species))+
geom_point()+
#  geom_abline(slope = 0.92,intercept = -1.9)+
stat_function(fun=percep_final(x),args=list(x2=train_df$s.wid),
geom="line")
ggplot(train_df,aes(x=s.len,y=s.wid,color=species))+
geom_point()+
#  geom_abline(slope = 0.92,intercept = -1.9)+
stat_function(fun=percep_final(x),args=train_df$s.wid,
geom="line")
ggplot(train_df,aes(x=s.len,y=s.wid,color=species))+
geom_point()+
#  geom_abline(slope = 0.92,intercept = -1.9)+
stat_function(train_df,aes(x=s.len),fun=percep_final,args=list(x2=train_df$s.wid),
geom="line")
class(traind_df)
class(train_df)
ggplot(train_df,aes(x=s.len,y=s.wid,color=species))+
geom_point()+
#  geom_abline(slope = 0.92,intercept = -1.9)+
stat_function(train_df,mapping = aes(x=s.len),
fun=percep_final,args=list(x2=train_df$s.wid),
geom="line")
y_preds <- perceptron(x, y, 1)
y_preds
y_preds <- 0
y_preds <- perceptron(x, y, 1)
y_preds <- perceptron(x, y, 0.5)
y_preds <- perceptron(x, y, 1)
y_preds
table(y_preds,train_df$V4)
y_preds <- perceptron(x, y, 0.3)
table(y_preds,train_df$V4)
y_preds <- perceptron(x, y, 0.2)
table(y_preds,train_df$V4)
y_preds <- perceptron(x, y, 0.002)
table(y_preds,train_df$V4)
phi_heavi <- function(x){ifelse(x >=0,1,-1)}
mark_i <- function(x, y, eta) {
w <- rnorm(dim(x)[2]) # numero de pesos = numero de colunas em x
ypreds <- rep(0,dim(x)[1]) # inicaliza predicoes em 0
# Treino
for (i in 1:length(y)) { # processa as observacoes em x
# predicao
ypred <- sum(w * as.numeric(x[i, ])) %>% phi_heavi
# update em w
delta_w <- eta * (y[i] - ypred) * as.numeric(x[i, ])
w <- w + delta_w
ypreds[i] <- ypred # salva predicao
}
# weight to decide between the two species
print(w)
return(ypreds)
}
mark_i(x,y,eta = 0.5)
mark_i(x,y,eta = 0.005)
return(ypreds)}
mark_i <- function(x, y, eta) {
w <- rnorm(dim(x)[2]) # numero de pesos = numero de colunas em x
ypreds <- rep(0,dim(x)[1]) # inicaliza predicoes em 0
# Treino
for (i in 1:length(y)) { # processa as observacoes em x
# predicao
ypred <- sum(w * as.numeric(x[i, ])) %>% phi_heavi
# update em w
delta_w <- eta * (y[i] - ypred) * as.numeric(x[i, ])
w <- w + delta_w
ypreds[i] <- ypred # salva predicao atual
}
print(w)
return(ypreds)}
y_preds <- mark_i(x, y, 0.002)
table(y_preds,train_df$V4)
names(train_df) <- c("s.len", "s.wid", "species","target")
train_df
train_df %>% head
table(y_preds,train_df$target)
85/100
ypred
ypreds
y_preds
for(i in sample(1:100,replace = F)) print i
for(i in sample(1:100,replace = F)) {print i}
for(i in sample(1:100,replace = F)) {print (i)}
mark_i <- function(x, y, eta) {
# inicializa pesos randomicos de distribuicao normal
w <- rnorm(dim(x)[2]) # numero de pesos = numero de colunas em x
ypreds <- rep(0,dim(x)[1]) # inicializa predicoes em 0
# Processa as observacoes em x de forma aleatoria
for (i in sample(1:length(y),replace=F)) {
# predicao
ypred <- sum(w * as.numeric(x[i, ])) %>% phi_heavi
# update em w
delta_w <- eta * (y[i] - ypred) * as.numeric(x[i, ])
w <- w + delta_w
ypreds[i] <- ypred # salva predicao atual
}
print(w)
return(ypreds)
}
y_preds <- mark_i(x_features, y_target, 0.002)
x_features <- train_df[, c(1, 2)]
y_target <- train_df[, 4]
y_preds <- mark_i(x_features, y_target, 0.002)
table(y_preds,train_df$target)
y_preds
(49+19)/100
y_preds <- mark_i(x_features, y_target, 0.05)
table(y_preds,train_df$target)
(34+47)/100
y_preds <- mark_i(x_features, y_target, 0.3)
table(y_preds,train_df$target)
y_preds <- mark_i(x_features, y_target, 0.4)
table(y_preds,train_df$target)
y_preds <- mark_i(x_features, y_target, 0.8)
table(y_preds,train_df$target)
y_preds <- mark_i(x_features, y_target, seq(0:1,by = 0.1))
y_preds <- mark_i(x_features, y_target, seq(0,1,by = 0.1))
class(y_preds)
y_preds <- mark_i(x_features, y_target, 1)
table(y_preds,train_df$target)
y_preds <- mark_i(x_features, y_target, 0.9)
table(y_preds,train_df$target)
y_preds <- mark_i(x_features, y_target, 0.95)
table(y_preds,train_df$target)
y_preds <- mark_i(x_features, y_target, 0.66)
table(y_preds,train_df$target)
y_preds <- mark_i(x_features, y_target, 0.77)
table(y_preds,train_df$target)
y_preds <- mark_i(x_features, y_target, 0.70)
table(y_preds,train_df$target)
y_preds <- mark_i(x_features, y_target, 0.63)
table(y_preds,train_df$target)
y_preds <- mark_i(x_features, y_target, 0.55)
y_preds <- mark_i(x_features, y_target, 0.63)
table(y_preds,train_df$target)
34+37
y_preds <- mark_i(x_features, y_target, 2)
table(y_preds,train_df$target)
y_preds <- mark_i(x_features, y_target, 1.5)
table(y_preds,train_df$target)
y_preds <- mark_i(x_features, y_target, 1.2)
table(y_preds,train_df$target)
y_preds <- mark_i(x_features, y_target, 1.8)
table(y_preds,train_df$target)
37+38
34+37
> y_preds <- mark_i(x_features, y_target, 1)
[1] -11.58454  23.00954
> table(y_preds,train_df$target)
y_preds -1  1
-1 37 14
1  13 36
y_preds <- mark_i(x_features, y_target, 1)
table(y_preds,train_df$target)
y_preds <- mark_i(x_features, y_target, 0.002)
34+37
